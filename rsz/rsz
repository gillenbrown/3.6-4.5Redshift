#! /usr/bin/env python
# ^ that line makes the code runnable from the command line without having
# to call `python` beforehand.

import os
import sys

from rsz_code import cluster
from rsz_code import config


def _open_default_param():
    try:
        return open("rsz.param")
    except IOError:
        raise IOError("Default param file not found. Create a param file.")


def parse_config():
    """Parse the config file, making a dictionary of parameters.

    Will use the user's specified param file if they specify one, and the
    default param file ('rsz.param') if not.

    :return: dictionary, with keys of parameter names, and values of the
             desired values for those parameters.
    """

    # the user can pass in a parameter when calling the program from the
    # command line, which will be the config file location. Open that if
    # available, and the default if not.
    if len(sys.argv) > 1:
        config_path = sys.argv[1]
        try:
            config_file = open(config_path)
        except IOError:
            print config_path + " was not found. Opening default .param file."
            config_file = _open_default_param()
    else:
        config_file = _open_default_param()

    # parse the file into a parameters dictionary
    params = dict()
    for line in config_file:
        if not line.startswith("#") and not line.isspace():
            # first item is the parameter, second is =, and third is the input
            params[line.split()[0]] = line.split()[2]
    config_file.close()

    # turn the path variables into absolute paths, if they were passed in in
    #  some other format.
    paths = ["catalog_directory", "plot_directory",
             "results_file", "rs_catalog_dir"]
    for path in paths:
        params[path] = os.path.abspath(params[path])

    # turn things into the right data type
    params["mag_zeropoint"] = float(params["mag_zeropoint"])

    return params


def fitting_combos(params):
    """
    Figure out which band combinations we can use to fit the red sequence,
    based on the band information provided in the param file.

    :param params: Parameter file generated by parse_config()
    :return: List of band combinations that will be fitted.
    """
    non_band_params = ["catalog_directory", "extension", "plot_directory",
                       "results_file", "rs_catalog_dir", "type",
                       "mag_zeropoint", "mag_system", "ra", "dec", "dist",
                       "CMD", "fitting_procedure", "final_CMD", "location",
                       "interactive"]

    bands = []
    for key in params:
        if key in non_band_params:
            continue
        # the key we have is either a flux/mag or an error
        if not key.endswith("_err"):
            bands.append(key)

    # we now have a list of all bands in the catalogs
    band_combos = []
    for band1 in bands:
        for band2 in bands:
            combo = "{}-{}".format(band1, band2)
            if combo in config.fitting_combos:
                band_combos.append(combo)
    return bands, band_combos


def get_catalogs(parent_directory, extension):
    """Gets all the catalogs in the parent directory (and its subdirectories)
    that end with extension.

    :param parent_directory: parent directory to search for catalogs.
    :param extension: extension of the files that will be returned
    :return: List of paths to files in parent_directory that end with
             extension.
    """
    catalogs = []
    # I'm not sure how this code works, to be honest.
    for dirpath, dirnames, filenames in os.walk(parent_directory):
        for filename in filenames:
            if filename.endswith(extension):
                catalogs.append(os.path.join(dirpath, filename))
    return catalogs


def start_output(params, colors):
    """Start the output file, and put the header in the file.

    :param params: parameter dictionary
    :return: open file object pointing to the output file.
    """
    output_file = open(params["results_file"], "w")
    # write the header, which looks really ugly in this format. It looks nice
    # when printed, though, I promise.
    header = "# " + 22*"-" + 3*" " + "rsz results" + 3*" " + 23*"-" + "\n" + \
             "#\n" + \
             "# - name: name of the cluster\n" + \
             "#\n" + \
             "#   The next few columns contain the redshift info. This\n" + \
             "#   done on a per band basis.\n" + \
             "# - z: best fit redshift of the cluster\n" + \
             "# - ez+: 1 sigma error on the redshift above the best fit\n" + \
             "# - ez-: 1 sigma error on the redshift below the best fit\n" + \
             "#        Note that these errors assume there is a distinct\n" + \
             "#         red sequence, so if there are flags be wary of\n" + \
             "#         this value.\n" + \
             "# - flag: This column contains info about multiple flags. \n" + \
             "#         Each flag is assigned to a value of 2^n, and \n" + \
             "#         then the numbers are summed together, with the \n" + \
             "#         results being recorded in this column. This \n" + \
             "#         allows for a unique identifier for each \n" + \
             "#         combination of flags.\n" + \
             "#         1: Not much clustering. The objects marked as \n" + \
             "#            red sequence members weren't centrally \n" + \
             "#            concentrated.\n" + \
             "#         2: Possible double red sequence. There are two\n" + \
             "#            maxima in the likelihood of redshift.\n" + \
             "#         4: Indistinct red sequence. The red sequence\n" + \
             "#            isn't clean.\n"

    if params["interactive"] == "1":
        header +=  \
             "#         8: User flag. If the code runs in interactive \n" + \
             "#            mode the user can flag clusters as bad.\n" + \
             "#\n" + \
             "# - interesting: In interactive mode, the use can flag \n" + \
             "#                clusters as interesting. This is on a \n" + \
             "#                per-cluster basis, not per-band.\n"

    header += "#\n" + \
              "#" + 63*"-" + "\n" + "#\n"
    output_file.write(header)
    labels = "# {:25s}".format("name")
    for color in colors:
        color = color.replace("sloan_", "")
        labels += " {:12s} {:12s} {:12s} {:12s}".format("z_" + color,
                                                        "ez+_" + color,
                                                        "ez-_" + color,
                                                        "flags_" + color)
    labels += "\n"

    output_file.write(labels)
    return output_file


def add_to_catalog(output_file, the_cluster):
    """Add the data from a given cluster to the results file.

    :param output_file: open file object where the results will be appended to.
    :param the_cluster: Cluster to add results from.
    :return: none, but the data from the cluster will be written to the file.
    """
    line = '{:27s}'.format(the_cluster.name.replace(" ", "_"))
    for color in the_cluster.z:
        line += " {:<12f} {:<12f} {:<12f} {:<12d}".format(the_cluster.z[color].value,
                                                          the_cluster.z[color].upper_error,
                                                          the_cluster.z[color].lower_error,
                                                          the_cluster.flags[color])
    line += "\n"
    output_file.write(line)


def main():
    """Functionality that runs when the user calls it from the command line.

    Prints the fancy headers, reads the parameter file, and finds all the
    catalogs. It then calls the fitting procedure on each cluster, and writes
    the results to the output file. It updates its progress as it goes.

    :return: none, but many things are written to files, depending on what
             the user specified in the parameter file.
    """
    # The header looks ugly here, but it is nice when printed.
    header = "\n+" + 70*"-"+ "+\n" +\
             "|" + 70*" " + "|\n" +\
             "|" + 33*" " + "rsz" + 34*" " + "|\n" + \
             "|" + 70 * " " + "|\n" + \
             "+" + 70 * "-" + "+\n"
    print header
    print "Reading parameter file..."
    # parse the config file, find the catalogs, and start the output
    params = parse_config()
    bands, fit_combos = fitting_combos(params)
    catalogs = get_catalogs(params["catalog_directory"], params["extension"])

    output_file = start_output(params, fit_combos)

    print "Starting redshift fitting..."
    # Use sys.stdout.write instead of print so I can get an updating progress.
    sys.stdout.write("0/{} clusters finished.".format(len(catalogs)))
    sys.stdout.flush()


    # catalogs is a list of paths to catalogs. I start at one so that the
    # count printed to the user isn't off by one.
    for i, cat_path in enumerate(catalogs, start=1):
        # make the cluster, and fit the redshift
        cl = cluster.Cluster(cat_path, params)
        for color in fit_combos:
            cl.fit_z(params, config.cfg_matches[color])

        cluster.save_as_one_pdf(cl.figures, params["plot_directory"] + os.sep +
                                cl.name + ".pdf")
        # if the user wants to make rs catalogs, do it
        if params["rs_catalog_dir"] != '-99':
            cl.rs_catalog(params)

        # make the output catalog
        add_to_catalog(output_file, cl)

        # update progress
        sys.stdout.write("\r")  # go back to the beginning of the line
        sys.stdout.write("{}/{} clusters finished. ".format(i, len(catalogs)))
        sys.stdout.flush()


    # output_file.close()

    print "\n"  # just to look nicer

# if the user calls the code from the command line, we want it to run, while
# still allowing the code to be imported and not immediately run. This
# accomplishes that.
if __name__ == "__main__":
    main()

# TODO: update online documentation
# TODO: validate parameter file
# tODO: include intrinsic red sequence scatter in error calculation.
